{"version":3,"sources":["../src/geohash.js"],"names":["decodeGeoHash","geohash","length","Error","BITS","BASE32","isEven","lat","lon","base32Decoded","split","forEach","item","indexOf","mask","refineInterval","latCenter","lonCenter","latitude","longitude","interval"],"mappings":";;;;;AAAe,WAASA,aAAT,CAAuBC,OAAvB,EAAgC;AAC7C,QAAI,CAACA,OAAD,IAAYA,QAAQC,MAAR,KAAmB,CAAnC,EAAsC,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;;AAEtC,QAAMC,OAAO,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAb;AACA,QAAMC,SAAS,kCAAf;AACA,QAAIC,SAAS,CAAb;AACA,QAAMC,MAAM,EAAZ;AACA,QAAMC,MAAM,EAAZ;AACAD,QAAI,CAAJ,IAAS,CAAC,IAAV;AACAA,QAAI,CAAJ,IAAS,IAAT;AACAC,QAAI,CAAJ,IAAS,CAAC,KAAV;AACAA,QAAI,CAAJ,IAAS,KAAT;AACA,QAAIC,sBAAJ;;AAEAR,YAAQS,KAAR,CAAc,EAAd,EAAkBC,OAAlB,CAA0B,UAACC,IAAD,EAAU;AAClCH,sBAAgBJ,OAAOQ,OAAP,CAAeD,IAAf,CAAhB;AACAR,WAAKO,OAAL,CAAa,UAACG,IAAD,EAAU;AACrB,YAAIR,MAAJ,EAAY;AACVS,yBAAeP,GAAf,EAAoBC,aAApB,EAAmCK,IAAnC;AACD,SAFD,MAEO;AACLC,yBAAeR,GAAf,EAAoBE,aAApB,EAAmCK,IAAnC;AACD;AACDR,iBAAS,CAACA,MAAV;AACD,OAPD;AAQD,KAVD;AAWA,QAAMU,YAAY,CAACT,IAAI,CAAJ,IAASA,IAAI,CAAJ,CAAV,IAAoB,CAAtC;AACA,QAAMU,YAAY,CAACT,IAAI,CAAJ,IAASA,IAAI,CAAJ,CAAV,IAAoB,CAAtC;;AAEA,WAAO,EAAEU,UAAUF,SAAZ,EAAuBG,WAAWF,SAAlC,EAAP;AACD;;qBA7BuBjB,a;;AA+BxB,WAASe,cAAT,CAAwBK,QAAxB,EAAkCX,aAAlC,EAAiDK,IAAjD,EAAuD;AACrD;AACA,QAAIL,gBAAgBK,IAApB,EAA0B;AACxBM,eAAS,CAAT,IAAc,CAACA,SAAS,CAAT,IAAcA,SAAS,CAAT,CAAf,IAA8B,CAA5C;AACD,KAFD,MAEO;AACLA,eAAS,CAAT,IAAc,CAACA,SAAS,CAAT,IAAcA,SAAS,CAAT,CAAf,IAA8B,CAA5C;AACD;AACF","file":"geohash.js","sourcesContent":["export default function decodeGeoHash(geohash) {\r\n  if (!geohash || geohash.length === 0) throw new Error('Missing geohash value');\r\n\r\n  const BITS = [16, 8, 4, 2, 1];\r\n  const BASE32 = '0123456789bcdefghjkmnpqrstuvwxyz';\r\n  let isEven = 1;\r\n  const lat = [];\r\n  const lon = [];\r\n  lat[0] = -90.0;\r\n  lat[1] = 90.0;\r\n  lon[0] = -180.0;\r\n  lon[1] = 180.0;\r\n  let base32Decoded;\r\n\r\n  geohash.split('').forEach((item) => {\r\n    base32Decoded = BASE32.indexOf(item);\r\n    BITS.forEach((mask) => {\r\n      if (isEven) {\r\n        refineInterval(lon, base32Decoded, mask);\r\n      } else {\r\n        refineInterval(lat, base32Decoded, mask);\r\n      }\r\n      isEven = !isEven;\r\n    });\r\n  });\r\n  const latCenter = (lat[0] + lat[1]) / 2;\r\n  const lonCenter = (lon[0] + lon[1]) / 2;\r\n\r\n  return { latitude: latCenter, longitude: lonCenter};\r\n}\r\n\r\nfunction refineInterval(interval, base32Decoded, mask) {\r\n  /* eslint no-bitwise: 0 */\r\n  if (base32Decoded & mask) {\r\n    interval[0] = (interval[0] + interval[1]) / 2;\r\n  } else {\r\n    interval[1] = (interval[0] + interval[1]) / 2;\r\n  }\r\n}\r\n"]}